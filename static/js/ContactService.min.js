class ContactService{constructor(t="",e){this.baseUrl=t,this.onError=e,this.currentRequest=null}getRequestKey(t,e,s=null){return`${t}:${e}:${s?JSON.stringify(s):""}`}async fetchWithRetry(t,e,s=3,r=1e3){let a;for(let n=0;n<s;n++)try{let u=new AbortController,i=setTimeout(()=>u.abort(),15e3),l=await fetch(t,{...e,signal:u.signal});if(clearTimeout(i),!l.ok)throw Error(`${l.status}: ${l.statusText}`);return l}catch(c){if(a=c,"AbortError"===c.name||n===s-1)throw c;let o=r*Math.pow(2,n);await new Promise(t=>setTimeout(t,o))}throw a}async makeRequest(t,e,s=null,r=null){let a=this.getRequestKey(t,e,s);if(this.currentRequest&&this.currentRequest.key===a)return this.currentRequest.promise;this.currentRequest&&this.currentRequest.controller.abort();let n=new AbortController,u={method:t,signal:r||n.signal,...s&&{headers:{"Content-Type":"application/json"},body:JSON.stringify(s)}},i=this.fetchWithRetry(e,u).then(t=>204===t.status?null:t.json()).then(t=>{if(!t)return{status:"success",data:null};if("success"!==t.status)throw Error(t.message||"Request failed");return{status:"success",data:t.data,...t.meta&&{meta:t.meta}}}).catch(s=>("AbortError"!==s.name&&this.onError(`${s.message} (${t} ${e})`),{status:"error",data:null})).finally(()=>{this.currentRequest&&this.currentRequest.key===a&&(this.currentRequest=null)});return this.currentRequest={key:a,promise:i,controller:n},i}async getContacts(t=10,e=1,s="",r=!1,a){let n=`${this.baseUrl}/contacts?pageCount=${t}&page=${e}&query=${encodeURIComponent(s)}&descOrder=${r}`;return this.makeRequest("GET",n,null,a)}async getContact(t,e){let s=`${this.baseUrl}/contacts/${t}`;return this.makeRequest("GET",s,null,e)}async upsertContact(t,e){if(!t?.firstName||!t?.lastName)return this.onError("First and last name are required"),{status:"error",data:null};let s=0===t.id,r=s?`${this.baseUrl}/contacts`:`${this.baseUrl}/contacts/${t.id}`;return this.makeRequest(s?"POST":"PUT",r,t,e)}async deleteContact(t,e){let s=`${this.baseUrl}/contacts/${t}`;return this.makeRequest("DELETE",s,null,e)}}export default ContactService;
